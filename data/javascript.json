[
{"keywords": "var n = 123;\nvar str = (\"00000\" + n).slice(-5);\nalert(str);"},
{"keywords": "(function(shannon) {\n  \n  function process(s, evaluator) {\n    var h = Object.create(null), k;\n    s.split('').forEach(function(c) {\n      h[c] && h[c]++ || (h[c] = 1); });\n    if (evaluator) for (k in h) evaluator(k, h[k]);\n    return h;\n  };\n  \n  shannon.entropy = function(s) {\n    var sum = 0,len = s.length;\n    process(s, function(k, f) {\n      var p = f/len;\n      sum -= p * Math.log(p) / Math.log(2);\n    });\n    return sum;\n  };\n})(window.shannon = window.shannon || {});\n\u00a0\n\nfunction logEntropy(s) {\n  console.log('Entropy of \"' + s + '\" in bits per symbol:', shannon.entropy(s));\n}\n\u00a0\nlogEntropy('1223334444');\nlogEntropy('0');\nlogEntropy('01');\nlogEntropy('0123');\nlogEntropy('01234567');\nlogEntropy('0123456789abcdef');"},
{"keywords": "function Animal() {\n    \n}function Dog() {\n    \n}\nDog.prototype = new Animal();function Cat() {\n    \n}\nCat.prototype = new Animal();function Collie() {\n    \n}\nCollie.prototype = new Dog();function Lab() {\n    \n}\nLab.prototype = new Dog();Animal.prototype.speak = function() {print(\"an animal makes a sound\")};\n\u00a0\nvar lab = new Lab();\nlab.speak();  "},
{"keywords": "\u00a0\nvar doors=[];\nfor(var i=0;i<100;i++)\n doors[i]=false;             \nfor(var i=1;i<=100;i++)\n for(var i2=i-1,g;i2<100;i2+=i)\n  doors[i2]=!doors[i2];      \nfor(var i=1;i<=100;i++)      \n console.log(\"Door\u00a0%d is\u00a0%s\",i,doors[i-1]?\"open\":\"closed\")\n\u00a0(function (n) {\n    'use strict';\n\u00a0\n\u00a0\n    \n    function finalDoors(n) {\n        var lstRange = range(1, n);\n\u00a0\n        return lstRange\n            .reduce(function (a, _, k) {\n                var m = k + 1;\n\u00a0\n                return a.map(function (x, i) {\n                    var j = i + 1;\n\u00a0\n                    return [j, j % m ? x[1] : !x[1]];\n                });\n            }, zip(\n                lstRange,\n                replicate(n, false)\n            ));\n    };\n\u00a0\n\u00a0\n\u00a0\n    \n\u00a0\n    \n    function zip(xs, ys) {\n        return xs.length === ys.length ? (\n            xs.map(function (x, i) {\n                return [x, ys[i]];\n            })\n        ) : undefined;\n    }\n\u00a0\n    \n    function replicate(n, a) {\n        var v = [a],\n            o = [];\n\u00a0\n        if (n < 1) return o;\n        while (n > 1) {\n            if (n & 1) o = o.concat(v);\n            n >>= 1;\n            v = v.concat(v);\n        }\n        return o.concat(v);\n    }\n\u00a0\n    \n    \n    function range(m, n, delta) {\n        var d = delta || 1,\n            blnUp = n > m,\n            lng = Math.floor((blnUp ? n - m : m - n) / d) + 1,\n            a = Array(lng),\n            i = lng;\n\u00a0\n        if (blnUp)\n            while (i--) a[i] = (d * i) + m;\n        else\n            while (i--) a[i] = m - (d * i);\n\u00a0\n        return a;\n    }\n\u00a0\n\u00a0\n    return finalDoors(n)\n        .filter(function (tuple) {\n            return tuple[1];\n        })\n        .map(function (tuple) {\n            return {\n                door: tuple[0],\n                open: tuple[1]\n            };\n        });\n\u00a0\n})(100);[{\"door\":1, \"open\":true}, {\"door\":4, \"open\":true}, {\"door\":9, \"open\":true}, {\"door\":16, \"open\":true}, {\"door\":25, \"open\":true}, {\"door\":36, \"open\":true}, {\"door\":49, \"open\":true}, {\"door\":64, \"open\":true}, {\"door\":81, \"open\":true}, {\"door\":100, \"open\":true}]for (var door = 1; door <= 100; door++) {\n  var sqrt = Math.sqrt(door);\n  if (sqrt === (sqrt | 0)) {\n    console.log(\"Door\u00a0%d is open\", door);\n  }\n}for(var door=1;i<10/*Math.sqrt(100)*/;i++){\n console.log(\"Door\u00a0%d is open\",i*i);\n}(function (n) {\n    'use strict';\n\u00a0\n    return range(1, 100)\n        .filter(function (x) {\n            return integerFactors(x)\n                .length % 2;\n        });\n\u00a0\n    function integerFactors(n) {\n        var rRoot = Math.sqrt(n),\n            intRoot = Math.floor(rRoot),\n\u00a0\n            lows = range(1, intRoot)\n            .filter(function (x) {\n                return (n % x) === 0;\n            });\n\u00a0\n        \n        return lows.concat(lows.map(function (x) {\n                return n / x;\n            })\n            .reverse()\n            .slice((rRoot === intRoot) | 0));\n    }\n\u00a0\n    \n    \n    function range(m, n, delta) {\n        var d = delta || 1,\n            blnUp = n > m,\n            lng = Math.floor((blnUp ? n - m : m - n) / d) + 1,\n            a = Array(lng),\n            i = lng;\n\u00a0\n        if (blnUp)\n            while (i--) a[i] = (d * i) + m;\n        else\n            while (i--) a[i] = m - (d * i);\n\u00a0\n        return a;\n    }\n\u00a0\n})(100);(function (n) {\n    'use strict';\n\u00a0\n    return perfectSquaresUpTo(100);\n\u00a0\n    function perfectSquaresUpTo(n) {\n        return range(1, Math.floor(Math.sqrt(n)))\n            .map(function (x) {\n                return x * x;\n            });\n    }\n\u00a0\n    \n\u00a0\n    \n    \n    function range(m, n, delta) {\n        var d = delta || 1,\n            blnUp = n > m,\n            lng = Math.floor((blnUp ? n - m : m - n) / d) + 1,\n            a = Array(lng),\n            i = lng;\n\u00a0\n        if (blnUp)\n            while (i--) a[i] = (d * i) + m;\n        else\n            while (i--) a[i] = m - (d * i);\n        return a;\n    }\n\u00a0\n})(100);[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\u00a0\nArray.apply(null, { length: 100 })\n  .map((v, i) => i + 1)\n    .forEach(door => { \n      var sqrt = Math.sqrt(door); \n\u00a0\n      if (sqrt === (sqrt | 0)) {\n        console.log(\"Door\u00a0%d is open\", door);\n      } \n    });\n[ for (i of Array.apply(null, { length: 100 })) i ].forEach((_, i) => { \n  var door = i + 1\n  var sqrt = Math.sqrt(door); \n\u00a0\n  if (sqrt === (sqrt | 0)) {\n    console.log(\"Door\u00a0%d is open\", door);\n  } \n});(function (n) {\n\u00a0\n\u00a0\n    \n    \n\u00a0\n    return perfectSquaresUpTo(n);\n\u00a0\n\u00a0\n    \n    function perfectSquaresUpTo(n) {\n        return range(1, Math.floor(Math.sqrt(n)))\n            .map(x => x * x);\n    }\n\u00a0\n\u00a0\n    \n\u00a0\n    \n    \n    function range(m, n, step) {\n        let d = (step || 1) * (n >= m ? 1 : -1);\n\u00a0\n        return Array.from({\n            length: Math.floor((n - m) / d) + 1\n        }, (_, i) => m + (i * d));\n    }\n\u00a0\n})(100);[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"},
{"keywords": "mod10check = function(cc) {\n  return $A(cc).reverse().map(Number).inject(0, function(s, d, i) {\n    return s + (i % 2 == 1 ? (d == 9 ? 9 : (d * 2) % 9) : d);\n  }) % 10 == 0;\n};\n['49927398716','49927398717','1234567812345678','1234567812345670'].each(function(i){alert(mod10check(i))});var LuhnCheck = (function()\n{\n\tvar luhnArr = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\n\treturn function(str)\n\t{\n\t\tvar counter = 0;\n\t\tvar incNum;\n\t\tvar odd = false;\n\t\tvar temp = String(str).replace(/[^\\d]/g, \"\");\n\t\tif ( temp.length == 0)\n\t\t\treturn false;\n\t\tfor (var i = temp.length-1; i >= 0; --i)\n\t\t{\n\t\t\tincNum = parseInt(temp.charAt(i), 10);\n\t\t\tcounter += (odd = !odd)? incNum : luhnArr[incNum];\n\t\t}\n\t\treturn (counter%10 == 0);\n\t}\n})();function luhn(str){\n\treturn str.split('').reduceRight(function(prev, curr, idx){\n\t\tprev = parseInt(prev, 10);\n\t\tif ((idx + 1) % 2 !== 0) {\n\t\t\tcurr = (curr * 2).toString().split('').reduce(function(p, c){ return parseInt(p, 10) + parseInt(c, 10)});\n\t\t}\n\t\treturn prev + parseInt(curr, 10);\n\t}) % 10 === 0;\n}var luhn10 = function(a,b,c,d,e) {\n  for(d = +a[b = a.length-1], e=0; b--;)\n    c = +a[b], d += ++e % 2 ? 2 * c % 10 + (c > 4) : c;\n  return !(d%10)\n};\n\u00a0\n\nluhn10('4111111111111111') \n\u00a0\n\nluhn10('4111111111111112') \n\u00a0"},
{"keywords": "\"use strict\"\n\u00a0\nconst _ = require('lodash');\n\u00a0\nconst WIDTH_ARGUMENT_POSITION  = 2;\nconst HEIGHT_ARGUMENT_POSITION = 3;\nconst TREE_PROBABILITY         = 0.5;\nconst NEW_TREE_PROBABILITY     = 0.01;\nconst BURN_PROBABILITY         = 0.0001;\nconst CONSOLE_RED              = '1b[31m';\nconst CONSOLE_GREEN            = '1b[32m';\nconst CONSOLE_COLOR_CLOSE      = '1b[91m';\nconst CONSOLE_CLEAR            = '001B[2J001B[0;0f';\nconst NEIGHBOURS               = [\n    [-1, -1],\n    [-1,  0],\n    [-1,  1],\n    [ 0, -1],\n    [ 0,  1],\n    [ 1, -1],\n    [ 1,  0],\n    [ 1,  1]\n];\nconst PRINT_DECODE             = {\n    ' ': ' ',\n    'T': `${CONSOLE_GREEN}T${CONSOLE_COLOR_CLOSE}`,\n    'B': `${CONSOLE_RED}T${CONSOLE_COLOR_CLOSE}`,\n};\nconst CONDITIONS = {\n    'T': (forest, y, x) => Math.random() < BURN_PROBABILITY || burningNeighbour(forest, y, x) ? 'B' : 'T',\n    ' ':  () => Math.random() < NEW_TREE_PROBABILITY ? 'T' : ' ',\n    'B':  () => ' '\n};\n\u00a0\nconst WIDTH  = process.argv[WIDTH_ARGUMENT_POSITION]  || 20;\nconst HEIGHT = process.argv[HEIGHT_ARGUMENT_POSITION] || 10;\n\u00a0\nconst update = forest => {\n    return _.map(forest, (c, ci) => {\n        return _.map(c, (r, ri) => {\n            return CONDITIONS[r](forest, ci, ri);\n        });\n    });\n}\n\u00a0\nconst printForest = forest => {\n    process.stdout.write(CONSOLE_CLEAR);\n    _.each(forest, c => {\n        _.each(c, r => {\n            process.stdout.write(PRINT_DECODE[r]);\n        });\n        process.stdout.write('');\n    })\n}\n\u00a0\nconst burningNeighbour = (forest, y, x) => {\n    return _(NEIGHBOURS)\n           .map(n => _.isUndefined(forest[y + n[0]]) ? null : forest[y + n[0]][x + n[1]])\n           .any(_.partial(_.isEqual, 'B'));\n};\n\u00a0\nlet forest = _.times(HEIGHT, () => _.times(WIDTH, () => Math.random() < TREE_PROBABILITY ? 'T' : ' '));\n\u00a0\nsetInterval(() => {\n    forest = update(forest);\n    printForest(forest)\n}, 20);\n\u00a0\n\u00a0var forest = {\n    X: 50,\n    Y: 50,\n    propTree: 0.5,\n    propTree2: 0.01,\n    propBurn: 0.0001,\n    t: [],\n    c: ['rgb(255,255,255)', 'rgb(0,255,0)', 'rgb(255,0,0)']\n};\n\u00a0\nfor(var i = 0; i < forest.Y; i++) {\n    forest.t[i] = [];\n    for(var j = 0; j < forest.Y; j++) {\n        forest.t[i][j] = Math.random() < forest.propTree ? 1 : 0;\n    }\n}\n\u00a0\nfunction afterLoad(forest) {\n    var canvas = document.getElementById('canvas');\n    var c = canvas.getContext('2d');\n    for(var i = 0; i < forest.X; i++) {\n        for(var j = 0; j < forest.Y; j++) {\n            c.fillStyle = forest.c[forest.t[i][j]];\n            c.fillRect(10*j, 10*i, 10*j+9, 10*i+9);\n        }\n    }\n}\n\u00a0\nfunction doStep(forest) {\n    var to = [];\n    for(var i = 0; i < forest.Y; i++) {\n        to[i] = forest.t[i].slice(0);\n    }\n\u00a0\n    \n    for(var i = 0; i < forest.Y; i++) {\n        for(var j = 0; j < forest.Y; j++) {\n            if(0 == to[i][j]) {\n                forest.t[i][j] = Math.random() < forest.propTree2 ? 1 : 0;\n            } else if(1 == to[i][j]) {\n                if(\n                    ((i>0) && (2 == to[i-1][j])) ||\n                    ((i<forest.Y-1) && (2 == to[i+1][j])) ||\n                    ((j>0) && (2 == to[i][j-1])) ||\n                    ((j<forest.X-1) && (2 == to[i][j+1]))\n                    ) {\n                    forest.t[i][j] = 2;\n                } else {\n                    forest.t[i][j] = Math.random() < forest.propBurn ? 2 : 1;\n                }\n            } else if(2 == to[i][j]) {\n                \n                forest.t[i][j] = 0;\n            }\n        }\n    }\n\u00a0\n}\n\u00a0\nwindow.setInterval(function(){\n    doStep(forest);\n    afterLoad(forest);\n}, 100);\n\u00a0"},
{"keywords": "var n = 1024;\nwhile (n > 0) {\n  print(n);\n  n /= 2;\n}function loopWhile(varValue, fnDelta, fnTest) {\n  'use strict';\n  var d = fnDelta(varValue);\n\u00a0\n  return fnTest(d) ? [d].concat(\n    loopWhile(d, fnDelta, fnTest)\n  ) : [];\n}\n\u00a0\nconsole.log(\n  loopWhile(\n    1024,\n    function (x) {\n      return Math.floor(x/2);\n    },\n    function (x) {\n      return x > 0;\n    }\n  ).join('')\n);512\n256\n128\n64\n32\n16\n8\n4\n2\n1"},
{"keywords": "\nvar a = [[2, 12, 10, 4], [18, 11, 9, 3], [14, 15, 7, 17], [6, 19, 8, 13], [1, 20, 16, 5]];\n\u00a0\nouter_loop:\nfor (var i in a) {\n    print(\"row \" + i);\n    for (var j in a[i]) {\n        print(\" \" + a[i][j]);\n        if (a[i][j] == 20) \n            break outer_loop;\n    }\n}\nprint(\"done\");var lst = [[2, 12, 10, 4], [18, 11, 9, 3], [14, 15, 7, 17], [6, 19, 8, 13], [1,\n  20, 16, 5]];\n\u00a0\nvar takeWhile = function (lst, fnTest) {\n    'use strict';\n    var varHead = lst.length ? lst[0] : null;\n\u00a0\n    return varHead ? (\n      fnTest(varHead) ? [varHead].concat(\n        takeWhile(lst.slice(1), fnTest)\n      ) : []\n    ) : []\n  },\n\u00a0\n  \n  notTwenty = function (n) {\n    return n !== 20;\n  },\n\u00a0\n  \n  \n  lstChecked = takeWhile(lst, function (group) {\n    return takeWhile(\n      group,\n      notTwenty\n    ).length === 4;\n  });\n\u00a0\n\u00a0\n\n\u00a0\nconsole.log(\n  \n  lstChecked.concat(\n    takeWhile(\n      lst[lstChecked.length], notTwenty\n    )\n  )\n  \n  .reduce(function (a, x) {\n    return a.concat(x);\n  }).join('')\n);2\n12\n10\n4\n18\n11\n9\n3\n14\n15\n7\n17\n6\n19\n8\n13\n6\n19\n8\n13\n1"},
{"keywords": "function loop_plus_half(start, end) {\n    var str = '',\n        i;\n    for (i = start; i <= end; i += 1) {\n        str += i;\n        if (i === end) {\n          break;\n        }\n        str += ', ';\n    }\n    return str;\n}\n\u00a0\nalert(loop_plus_half(1, 10));function range(m, n) {\n  return Array.apply(null, Array(n - m + 1)).map(\n    function (x, i) {\n      return m + i;\n    }\n  );\n}\n\u00a0\nconsole.log(\n  range(1, 10).join(', ')\n);1, 2, 3, 4, 5, 6, 7, 8, 9, 10function range(m, n) {\n  return Array.apply(null, Array(n - m + 1)).map(function (x, i) {\n    return m + i;\n  });\n}\n\u00a0\nconsole.log(\n  (function (nFrom, nTo) {\n    var iLast = nTo - 1;\n\u00a0\n    return range(nFrom, nTo).reduce(\n      function (accumulator, n, i) {\n        return accumulator +\n          n.toString() +\n\u00a0\n          (i < iLast ? ', ' : ''); \n\u00a0\n      }, ''\n    )\n  })(1, 10)\n);1, 2, 3, 4, 5, 6, 7, 8, 9, 10var s=1, e=10\nfor (var i=s; i<=e; i+=1) {\n\tdocument.write( i==s ? '' : ', ', i )\n}var s=1, e=10\nfor (;; s+=1) {\n\tdocument.write( s )\n\tif (s==e) break\n\tdocument.write( ', ' )\n}"},
{"keywords": "for (;;) console.log(\"SPAM\");while (true) console.log(\"SPAM\");"},
{"keywords": "\"alpha beta gamma delta\".split(' ').forEach(\n  function (x) {\n    console.log(x);\n  }\n);console.log(\"alpha beta gamma delta\".split(' ').map(\n  function (x) {\n    return x.toUpperCase(x);\n  }\n).join(''));console.log(\n  \"alpha beta gamma delta\".split(' ').reduce(\n    function (a, x, i, lst) {\n      return lst.length - i + '. ' + x + '' + a;\n    }, ''\n  )\n)for (var a in o) {\n    print(o[a]);\n}for (var a in o) {\n    if (o.hasOwnProperty(a)) {\n        print(o[a]);\n    }\n}h = {\"one\":1, \"two\":2, \"three\":3}\nfor (x in h) print(x);\n/*twoonethree*/\n\u00a0\nfor each (y in h) print(y);\n/*213*/h = {\"one\":1, \"two\":2, \"three\":3}\nfor (x in h) print(x);\n/*twoonethree*/\n\u00a0\nfor (y of h) print(y);\n/*213*/"},
{"keywords": "> Math.pow(0, 0);\n1"},
{"keywords": "function ZigZagMatrix(n) {\n    this.height = n;\n    this.width = n;\n\u00a0\n    this.mtx = [];\n    for (var i = 0; i < n; i++) \n        this.mtx[i] = [];\n\u00a0\n    var i=1, j=1;\n    for (var e = 0; e < n*n; e++) {\n        this.mtx[i-1][j-1] = e;\n        if ((i + j) % 2 == 0) {\n            \n            if (j < n) j ++;\n            else       i += 2;\n            if (i > 1) i --;\n        } else {\n            \n            if (i < n) i ++;\n            else       j += 2;\n            if (j > 1) j --;\n        }\n    }\n}\nZigZagMatrix.prototype = Matrix.prototype;\n\u00a0\nvar z = new ZigZagMatrix(5);\nprint(z);\nprint();\n\u00a0\nz = new ZigZagMatrix(4);\nprint(z);(function (n) {\n\u00a0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\u00a0\n    \n      function diagonals(n) {\n          function diags(xs, iCol, iRow) {\n              if (iCol < xs.length) {\n                  var xxs = splitAt(iCol, xs);\n\u00a0\n                  return [xxs[0]].concat(diags(\n                      xxs[1],\n                      (iCol + (iRow < n ? 1 : -1)),\n                      iRow + 1\n                  ));\n              } else return [xs];\n          }\n\u00a0\n          return diags(range(0, n * n - 1), 1, 1);\n      }\n\u00a0\n\u00a0\n\u00a0\n    \n    \n    function nHeads(n, lst) {\n        var zipEdge = lst.slice(0, n);\n\u00a0\n        return lst.length ? [zipEdge.map(function (x) {\n            return x[0];\n        })].concat(nHeads(n, [].concat.apply([], zipEdge.map(function (\n                x) {\n                return x.length > 1 ? [x.slice(1)] : [];\n            }))\n            .concat(lst.slice(n)))) : [];\n    }\n\u00a0\n    \n    \n    function range(m, n, delta) {\n        var d = delta || 1,\n            blnUp = n > m,\n            lng = Math.floor((blnUp ? n - m : m - n) / d) + 1,\n            a = Array(lng),\n            i = lng;\n\u00a0\n        if (blnUp)\n            while (i--) a[i] = (d * i) + m;\n        else\n            while (i--) a[i] = m - (d * i);\n        return a;\n    }\n\u00a0\n    \n    function splitAt(n, xs) {\n        return [xs.slice(0, n), xs.slice(n)];\n    }\n\u00a0\n    \n\u00a0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\u00a0\n\u00a0\n    return nHeads(n, diagonals(n)\n        .map(function (x, i) {\n            i % 2 || x.reverse();\n            return x;\n        }));\n\u00a0\n})(5);[[0, 1, 5, 6, 14],\n [2, 4, 7, 13, 15],\n [3, 8, 12, 16, 21],\n [9, 11, 17, 20, 22],\n [10, 18, 19, 23, 24]](n => {\n\u00a0\n    \n    function diagonals(n) {\n        let diags = (xs, iCol, iRow) => {\n            if (iCol < xs.length) {\n                let xxs = splitAt(iCol, xs);\n\u00a0\n                return [xxs[0]].concat(diags(\n                    xxs[1],\n                    iCol + (iRow < n ? 1 : -1),\n                    iRow + 1\n                ));\n            } else return [xs];\n        }\n\u00a0\n        return diags(range(0, n * n - 1), 1, 1);\n    }\n\u00a0\n\u00a0\n    \n    \n    function rowsFromDiagonals(n, lst) {\n        if (lst.length) {\n            let [edge, rest] = splitAt(n, lst);\n\u00a0\n            return [edge.map(x => x[0])]\n                .concat(rowsFromDiagonals(n,\n                    edge.filter(x => x.length > 1)\n                    .map(x => x.slice(1))\n                    .concat(rest)\n                ));\n        } else return [];\n    }\n\u00a0\n    \n\u00a0\n    \n    function splitAt(n, xs) {\n        return [xs.slice(0, n), xs.slice(n)];\n    }\n\u00a0\n    \n    \n    function range(m, n, step) {\n        let d = (step || 1) * (n >= m ? 1 : -1);\n\u00a0\n        return Array.from({\n            length: Math.floor((n - m) / d) + 1\n        }, (_, i) => m + (i * d));\n    }\n\u00a0\n    \n\u00a0\n    return rowsFromDiagonals(n,\n        diagonals(n)\n        .map((x, i) => (i % 2 || x.reverse()) && x)\n    );\n\u00a0\n})(5);[[0, 1, 5, 6, 14],\n [2, 4, 7, 13, 15],\n [3, 8, 12, 16, 21],\n [9, 11, 17, 20, 22],\n [10, 18, 19, 23, 24]]"},
{"keywords": "(() => {\n    'use strict';\n\u00a0\n    \n    function zeckendorf(n) {\n        let f = (n, x) => (n < x ? [n, 0] : [n - x, 1]);\n\u00a0\n        return (n === 0 ? (\n                [0]\n            ) : mapAccumL(f, n, reverse(tail(fibUntil(n))))[1])\n            .join('');\n    }\n\u00a0\n\u00a0\n    \n    let fibUntil = n => {\n        let xs = [];\n        until(\n            ([a, b]) => a > n,\n            ([a, b]) => (xs.push(a), [b, a + b]), [1, 1]\n        )\n        return xs;\n    }\n\u00a0\n    \n\u00a0\n    \n    let mapAccumL = (f, acc, xs) => {\n        return xs.reduce((a, x) => {\n            let pair = f(a[0], x);\n\u00a0\n            return [pair[0], a[1].concat(pair[1])];\n        }, [acc, []]);\n    }\n\u00a0\n    \n    let until = (p, f, x) => {\n        let v = x;\n        while (!p(v)) v = f(v);\n        return v;\n    }\n\u00a0\n    \n    let tail = xs => xs.length ? xs.slice(1) : undefined;\n\u00a0\n    \n    let reverse = xs => xs.slice(0)\n        .reverse();\n\u00a0\n    \n    let range = (m, n) =>\n        Array.from({\n            length: Math.floor(n - m) + 1\n        }, (_, i) => m + i);\n\u00a0\n    \n    return range(0, 20)\n        .map(zeckendorf)\n        .join('')\n\u00a0\n})();\n\u00a0"},
{"keywords": "\u00a0\nfunction Arc(posX,posY,radius,startAngle,endAngle,color){\nthis.posX=posX;\nthis.posY=posY;\nthis.radius=radius;\nthis.startAngle=startAngle;\nthis.endAngle=endAngle;\nthis.color=color;\n}\n\nvar YingYang=[\nnew Arc(0.5,0.5,1,0.5*Math.PI,1.5*Math.PI,\"white\"),\nnew Arc(0.5,0.5,1,1.5*Math.PI,0.5*Math.PI,\"black\"),\nnew Arc(0.5,0.25,.5,0,2*Math.PI,\"black\"),\nnew Arc(0.5,0.75,.5,0,2*Math.PI,\"white\"),\nnew Arc(0.5,0.25,1/6,0,2*Math.PI,\"white\"),\nnew Arc(0.5,0.75,1/6,0,2*Math.PI,\"black\")\n]\n\n\n\nfunction Array2D(width,height){\nthis.height=height;\nthis.width=width;\nthis.array2d=[];\nfor(var i=0;i<this.height;i++){\nthis.array2d.push(new Array(this.width));\n}\n}\nArray2D.prototype.resize=function(width,height){\n\nvar nheight=height-this.height,nwidth=width-this.width;\nif(nwidth>0){\nfor(var i=0;i<this.height;i++){\nif(i<height)\nArray.prototype.push.apply(this.array2d[i],new Array(nwidth));\n}\n}\nelse if(nwidth<0){\nfor(var i=0;i<this.height;i++){\nif(i<height)\n this.array2d[i].splice(width,nwidth);\n}\n}\nif(nheight>0){\n Array.prototype.push.apply(this.array2d,new Array(width));\n}\nelse if(nheight<0){\n this.array2d.splice(height,nheight)\n}\n}\nArray2D.prototype.loop=function(callback){\nfor(var i=0;i<this.height;i++)\n for(var i2=0;i2<this.width;i++)\n   callback.call(this,this.array2d[i][i2],i,i2);\n\u00a0\n}\nvar mat=new Array2D(100,100);\nYingYang[0];\n\n\u00a0YinYang = (function () {\n  var scale_x = 2,\n    scale_y = 1,\n    black = \"#\",\n    white = \".\",\n    clear = \" \",\n    out = \"\";\n\u00a0\n  function draw(radius) {\n    function inCircle(centre_x, centre_y, radius, x, y) {\n      return Math.pow(x - centre_x, 2) + Math.pow(y - centre_y, 2) <= Math.pow(radius, 2)\n    }\n    var bigCircle = function (x, y) {\n      return inCircle(0, 0, radius, x, y)\n    }, whiteSemiCircle = function (x, y) {\n        return inCircle(0, radius / 2, radius / 2, x, y)\n      }, smallBlackCircle = function (x, y) {\n        return inCircle(0, radius / 2, radius / 6, x, y)\n      }, blackSemiCircle = function (x, y) {\n        return inCircle(0, -radius / 2, radius / 2, x, y)\n      }, smallWhiteCircle = function (x, y) {\n        return inCircle(0, -radius / 2, radius / 6, x, y)\n      };\n    i = 0\n    for (var sy = Math.round(radius * scale_y); sy >= -Math.round(radius * scale_y); sy--) {\n      \n      for (var sx = -Math.round(radius * scale_x); sx <= Math.round(radius * scale_x); sx++) {\n\u00a0\n        var x = sx / scale_x,\n          y = sy / scale_y;\n        \n        \n        if (bigCircle(x, y)) {\n          \n          if (whiteSemiCircle(x, y)) {\n            \n            if (smallBlackCircle(x, y)) {\n              out += black\n            } else {\n              out += white\n            }\n          } else if (blackSemiCircle(x, y)) {\n            if (smallWhiteCircle(x, y)) {\n              out += white\n            } else {\n              out += black\n            }\n          } else if (x < 0) {\n            out += white\n          } else {\n            out += black\n          }\n\u00a0\n        } else {\n          out += clear;\n        }\n\u00a0\n      }\n      out += \"\";\n    }\n    return out;\n  }\n  return draw\n})()\nconsole.log(YinYang(17))\nconsole.log(YinYang(8))<!DOCTYPE html>\n<html>\n\u00a0\n<head>\n\u00a0\n  <body>\n    <svg\n    id=\"svg\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    version=\"1.1\"\n    width=\"100%\"\n    height=\"100%\">\n      </svg>\n      <script>\nfunction makeElem(elemName, attribs) { \n  var e = document.createElementNS(\"http://www.w3.org/2000/svg\", elemName),\n    a, b, d = attribs.style;\n  for (a in attribs) {\n    if (attribs.hasOwnProperty(a)) {\n\u00a0\n      if (a == 'style') {\n        for (b in d) {\n          if (d.hasOwnProperty(b)) {\n            e.style[b] = d[b];\n          }\n        }\n        continue;\n      }\n      e.setAttributeNS(null, a, attribs[a]);\n    }\n  }\n  return e;\n}\nvar svg = document.getElementById(\"svg\");\n\u00a0\nfunction drawYingYang(n, x, y) {\n  var d = n / 10;\n  h = d * 5, q = h / 2, t = q * 3;\n  \n  svg.appendChild(makeElem(\"circle\", {\n    cx: h,\n    cy: h,\n    r: h,\n    fill: \"white\"\n  }));\n  \n  svg.appendChild(makeElem(\"path\", {\n    d: \"M \" + (h + x) + \",\" + y + \" A \" + q + \",\" + q + \" -\" + d * 3 + \" 0,1 \" + (h + x) + \",\" + (n + y) + \" z\",\n    fill: \"black\"\n  }));\n  \n  svg.appendChild(makeElem(\"circle\", {\n    cx: h + x,\n    cy: q + y,\n    r: q,\n    fill: \"white\"\n  }));\n  svg.appendChild(makeElem(\"circle\", {\n    cx: h + x,\n    cy: t + y,\n    r: q,\n    fill: \"black\"\n  }));\n  \n  svg.appendChild(makeElem(\"circle\", {\n    cx: h + x,\n    cy: q + y,\n    r: d,\n    fill: \"black\"\n  }));\n  svg.appendChild(makeElem(\"circle\", {\n    cx: h + x,\n    cy: t + y,\n    r: q,\n    fill: \"black\"\n  }));\n  svg.appendChild(makeElem(\"circle\", {\n    cx: h + x,\n    cy: t + y,\n    r: d,\n    fill: \"white\"\n  }));\n  \n  svg.appendChild(makeElem(\"circle\", {\n    cx: h + x,\n    cy: h + y,\n    r: h,\n    fill: \"none\",\n    stroke: \"gray\",\n    \"stroke-width\": d / 3\n  }));\n  if (svg.height.baseVal.valueInSpecifiedUnits < n) {\n    svg.setAttributeNS(null, \"height\", y * 1.25 + n + \"px\")\n  }\n  \n}\ndrawYingYang(100, 30, 30);\ndrawYingYang(1000, 200, 200);\n      </script>\n  </body>\n</head>\n\u00a0\n</html>"},
{"keywords": "\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'file.xml', false);\nxhr.send(null);\nvar doc = xhr.responseXML;\n\u00a0\n\nvar firstItem = doc.evaluate( '//item[1]', doc, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null ).singleNodeValue;\nalert( firstItem.textContent );\n\u00a0\n\nvar prices = doc.evaluate( '//price', doc, null, XPathResult.ANY_TYPE, null );\nfor( var price = prices.iterateNext(); price != null; price = prices.iterateNext() ) {\n  alert( price.textContent );\n}\n\u00a0\n\nvar names = doc.evaluate( '//name', doc, null, XPathResult.ANY_TYPE, null);\nvar namesArray = [];\nfor( var name = names.iterateNext(); name != null; name = names.iterateNext() ) {\n  namesArray.push( name );\n}\nalert( namesArray );\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', 'file.xml', false);\nxhr.send(null);\nvar doc = new XML(xhr.responseText);\n\u00a0\n\nvar firstItem = doc..item[0];\nalert( firstItem );\n\u00a0\n\nfor each( var price in doc..price ) {\n  alert( price );\n}\n\u00a0\n\nvar names = [];\nfor each( var name in doc..name ) {\n  names.push( name );\n}\nalert( names );"},
{"keywords": "function Y(f) {\n    var g = f((function(h) {\n        return function() {\n            var g = f(h(h));\n            return g.apply(this, arguments);\n        }\n    })(function(h) {\n        return function() {\n            var g = f(h(h));\n            return g.apply(this, arguments);\n        }\n    }));\n    return g;\n}\n\u00a0\nvar fac = Y(function(f) {\n    return function (n) {\n        return n > 1 ? n * f(n - 1) : 1;\n    };\n});\n\u00a0\nvar fib = Y(function(f) {\n    return function(n) {\n        return n > 1 ? f(n - 1) + f(n - 2) : n;\n    };\n});function Y(f) {\n    return (function(h) {\n        return h(h);\n    })(function(h) {\n        return f(function() {\n            return h(h).apply(this, arguments);\n        });\n    });\n}function pseudoY(f) {\n    return (function(h) {\n        return h(h);\n    })(function(h) {\n        return f.bind(function() {\n            return h(h).apply(null, arguments);\n        });\n    });\n}\n\u00a0\nvar fac = pseudoY(function(n) {\n    return n > 1 ? n * this(n - 1) : 1;\n});\n\u00a0\nvar fib = pseudoY(function(n) {\n    return n > 1 ? this(n - 1) + this(n - 2) : n;\n});function Y(f) {\n    return function() {\n    \treturn f(Y(f)).apply(this, arguments);\n    };\n}function Y(f) {\n    return function() {\n    \treturn f(arguments.callee).apply(this, arguments);\n    };\n}let\n    Y= \n        f=>((g=>(f((...x)=>g(g)(...x))))\n            (g=>(f((...x)=>g(g)(...x))))),\n    Y2= \n        f=>((f=>f(f))\n            (g=>(f((...x)=>g(g)(...x))))),\n    Y3= \n        ((\u03b4=>f=>\u03b4(g=>(f((...x)=>g(g)(...x)))))\n         ((f=>f(f)))),\n    fix= \n        (((f)=>(g)=>(h)=>(f(h)(g(h)))) \n         ((f)=>(g)=>(...x)=>(f(g(g)))(...x)) \n         ((f)=>(g)=>(...x)=>(f(g(g)))(...x))),\n    fix2= \n        f=>(f=>f(f))(g=>(...x)=>f(g(g))(...x)),\n    opentailfact= \n        fact=>(n,m=1)=>n<2?m:fact(n-1,n*m);\n    tailfact= \n        Y(opentailfact);let\n    polyfix= \n        (...l)=>(\n            (f=>f(f))\n            (g=>l.map(f=>(...x)=>f(...g(g))(...x)))),\n    [even,odd]= \n        polyfix(\n            (even,odd)=>n=>(n===0)||odd(n-1),\n            (even,odd)=>n=>(n!==0)&&even(n-1));var Y = f => (x => x(x))(y => f(x => y(y)(x)));\nvar fac = Y(f => n => n > 1 ? n * f(n-1) : 1);"},
{"keywords": "var doc = document.implementation.createDocument( null, 'root', null );\nvar root = doc.documentElement;\nvar element = doc.createElement( 'element' );\nroot.appendChild( element );\nelement.appendChild( document.createTextNode('Some text here') );\nvar xmlString = new XMLSerializer().serializeToString( doc );var xml = <root>\n  <element>Some text here</element>\n</root>;\nvar xmlString = xml.toXMLString();XML.ignoreProcessingInstructions = false;\nvar xml = <?xml version=\"1.0\"?>  \n<root>\n  <element>Some text here</element>\n</root>;\nvar xmlString = xml.toXMLString();"},
{"keywords": "\u00a0\nvar xmlstr = '<Students>' + \n  '<Student Name=\"April\" Gender=\"F\" DateOfBirth=\"1989-01-02\" />' +\n  '<Student Name=\"Bob\" Gender=\"M\"  DateOfBirth=\"1990-03-04\" />' +\n  '<Student Name=\"Chad\" Gender=\"M\"  DateOfBirth=\"1991-05-06\" />' +\n  '<Student Name=\"Dave\" Gender=\"M\"  DateOfBirth=\"1992-07-08\">' +\n    '<Pet Type=\"dog\" Name=\"Rover\" />' +\n  '</Student>' +\n  '<Student DateOfBirth=\"1993-09-10\" Gender=\"F\" Name=\"&#x00C9;mily\" />' +\n'</Students>';\n\u00a0\nif (window.DOMParser)\n  {\n  parser=new DOMParser();\n  xmlDoc=parser.parseFromString(xmlstr,\"text/xml\");\n  }\nelse \n  {\n  xmlDoc=new ActiveXObject(\"Microsoft.XMLDOM\");\n  xmlDoc.async=false;\n  xmlDoc.loadXML(xmlstr); \n  }\n\u00a0\nvar students=xmlDoc.getElementsByTagName('Student');\nfor(var e=0; e<=students.length-1; e++) {\n  console.log(students[e].attributes.Name.value);\n}\n\u00a0\u00a0\nvar parseString = require('xml2js').parseString;\nvar xmlstr = '<Students>' +\n  '<Student Name=\"April\" Gender=\"F\" DateOfBirth=\"1989-01-02\" />' +\n  '<Student Name=\"Bob\" Gender=\"M\"  DateOfBirth=\"1990-03-04\" />' +\n  '<Student Name=\"Chad\" Gender=\"M\"  DateOfBirth=\"1991-05-06\" />' +\n  '<Student Name=\"Dave\" Gender=\"M\"  DateOfBirth=\"1992-07-08\">' +\n    '<Pet Type=\"dog\" Name=\"Rover\" />' +\n  '</Student>' +\n  '<Student DateOfBirth=\"1993-09-10\" Gender=\"F\" Name=\"&#x00C9;mily\" />' +\n'</Students>';\n\u00a0\nparseString(xmlstr, function (err, result) {\n   if (!err) {\n      result.Students.Student.forEach( function(student) {\n         console.log(student.$.Name);\n      } );\n   }\n});\n\u00a0\u00a0\nvar xmlstr = '<Students>' + \n  '<Student Name=\"April\" Gender=\"F\" DateOfBirth=\"1989-01-02\" />' +\n  '<Student Name=\"Bob\" Gender=\"M\"  DateOfBirth=\"1990-03-04\" />' +\n  '<Student Name=\"Chad\" Gender=\"M\"  DateOfBirth=\"1991-05-06\" />' +\n  '<Student Name=\"Dave\" Gender=\"M\"  DateOfBirth=\"1992-07-08\">' +\n    '<Pet Type=\"dog\" Name=\"Rover\" />' +\n  '</Student>' +\n  '<Student DateOfBirth=\"1993-09-10\" Gender=\"F\" Name=\"&#x00C9;mily\" />' +\n'</Students>';\nvar xml = XML(xmlstr);\nvar list = xml.Student.@Name;\nvar output = '';\nfor (var i = 0; i < list.length(); i++) {\n  if (i > 0) {\n    output += ', ';\n  }\n  output += list[i];\n}\n\u00a0\nalert(output);\n\u00a0"},
{"keywords": "var req = new XMLHttpRequest();\nreq.onload = function () {\n  var re = /[JFMASOND].+ UTC/; \n  console.log(this.responseText.match(re)[0]);\n};\nreq.open('GET', 'http://tycho.usno.navy.mil/cgi-bin/timer.pl', true);\nreq.send();"},
{"keywords": "\u00a0\nfunction wrap (text, limit) {\n  if (text.length > limit) {\n    \n    var edge = text.slice(0, limit).lastIndexOf(' ');\n    if (edge > 0) {\n      var line = text.slice(0, edge);\n      var remainder = text.slice(edge + 1);\n      return line + '' + wrap(remainder, limit);\n    }\n  }\n  return text;\n}\n\u00a0\u00a0\nconsole.log(wrap(text, 80));\n\u00a0\u00a0\nconsole.log(wrap(text, 42));\n\u00a0(function (width) {\n    'use strict';\n\u00a0\n    function wrapByRegex(n, s) {\n        return s.match(\n                RegExp('.{1,' + n + '}(s|$)', 'g')\n            )\n            .join('');\n    }\n\u00a0\n    return wrapByRegex(width,\n'Even today, with proportional fonts and complex layouts, there are still cases where you need to wrap text at a specified column. The basic task is to wrap a paragraph of text in a simple way in your language. If there is a way to do this that is built-in, trivial, or provided in a standard library, show that. Otherwise implement the minimum length greedy algorithm from Wikipedia.'\n    )\n\u00a0\n})(60);\u00a0\n/** * [wordwrap description] * @param  {[type]}  text  [description] * @param  {Number}  width [description] * @param  {String}  br    [description] * @param  {Boolean} cut   [description] * @return {[type]}        [description] */\nfunction wordwrap(text, width = 80, br = '', cut = false) {\n  \n  \n  width >>>= 0;\n  \n  if (0 === width || text.length <= width) {\n    return text;\n  }\n  \n  return text.split('').map(line => {\n    if (line.length <= width) {\n      return line;\n    }\n    \n    let words = line.split(' ');\n    \n    if (cut) {\n      let temp = [];\n      for (const word of words) {\n        if (word.length > width) {\n          let i = 0;\n          const length = word.length;\n          while (i < length) {\n            temp.push(word.slice(i, Math.min(i + width, length)));\n            i += width;\n          }\n        } else {\n          temp.push(word);\n        }\n      }\n      words = temp;\n    }\n    \n    \n    let wrapped = words.shift();\n    let spaceLeft = width - wrapped.length;\n    for (const word of words) {\n      if (word.length + 1 > spaceLeft) {\n        wrapped += br + word;\n        spaceLeft = width - word.length;\n      } else {\n        wrapped += ' ' + word;\n        spaceLeft -= 1 + word.length;\n      }\n    }\n    return wrapped;\n  }).join(''); \n}\n\u00a0\u00a0\nconsole.log(wordwrap(\"The quick brown fox jumped over the lazy dog.\", 20, \"<br />\"));\n\u00a0"},
{"keywords": "(function () {\n    'use strict';\n\u00a0\n    \n    var waterCollected = function (xs) {\n        return sum(                   \n            zipWith(function (a, b) {\n                    return a - b;     \n                },\n                zipWith(min,          \n                    scanl1(max, xs),  \n                    scanr1(max, xs)   \n                ), \n                xs                    \n            )\n            .filter(function (x) {\n                return x > 0;         \n            })\n        );\n    };\n\u00a0\n    \n\u00a0\n    \n    var zipWith = function (f, xs, ys) {\n        var ny = ys.length;\n        return (xs.length <= ny ? xs : xs.slice(0, ny))\n            .map(function (x, i) {\n                return f(x, ys[i]);\n            });\n    };\n\u00a0\n    \n    \n    var scanl1 = function (f, xs) {\n        return xs.length > 0 ? scanl(f, xs[0], xs.slice(1)) : [];\n    };\n\u00a0\n    \n    \n    var scanr1 = function (f, xs) {\n        return xs.length > 0 ? scanr(f, xs.slice(-1)[0], xs.slice(0, -1)) : [];\n    };\n\u00a0\n    \n    var scanl = function (f, startValue, xs) {\n        var lst = [startValue];\n        return xs.reduce(function (a, x) {\n            var v = f(a, x);\n            return lst.push(v), v;\n        }, startValue), lst;\n    };\n\u00a0\n    \n    var scanr = function (f, startValue, xs) {\n        var lst = [startValue];\n        return xs.reduceRight(function (a, x) {\n            var v = f(a, x);\n            return lst.push(v), v;\n        }, startValue), lst.reverse();\n    };\n\u00a0\n    \n    var sum = function (xs) {\n        return xs.reduce(function (a, x) {\n            return a + x;\n        }, 0);\n    };\n\u00a0\n    \n    var max = function (a, b) {\n        return a > b ? a : b;\n    };\n\u00a0\n    \n    var min = function (a, b) {\n        return b < a ? b : a;\n    };\n\u00a0\n    \n    return [\n        [1, 5, 3, 7, 2],\n        [5, 3, 7, 2, 6, 4, 5, 9, 1, 2],\n        [2, 6, 3, 5, 2, 8, 1, 4, 2, 2, 5, 3, 5, 7, 4, 1],\n        [5, 5, 5, 5],\n        [5, 6, 7, 8],\n        [8, 7, 7, 6],\n        [6, 7, 10, 7, 6]\n    ].map(waterCollected);\n\u00a0\n    \n})();[2, 14, 35, 0, 0, 0, 0](() => {\n    'use strict';\n\u00a0\n    \n    const waterCollected = xs => {\n        const maxToRight = scanr1(max, xs),\n            maxToLeft = scanl1(max, xs),\n            levels = zipWith(min, maxToLeft, maxToRight);\n\u00a0\n        return sum(zipWith(difference, levels, xs)\n            .filter(x => x > 0));\n    };\n\u00a0\n\u00a0\n    \n\u00a0\n    \n    const zipWith = (f, xs, ys) => {\n        const ny = ys.length;\n        return (xs.length <= ny ? xs : xs.slice(0, ny))\n            .map((x, i) => f(x, ys[i]));\n    }\n\u00a0\n    \n    \n    const scanl1 = (f, xs) =>\n        xs.length > 0 ? scanl(f, xs[0], xs.slice(1)) : [];\n\u00a0\n    \n    \n    const scanr1 = (f, xs) =>\n        xs.length > 0 ? scanr(f, xs.slice(-1)[0], xs.slice(0, -1)) : [];\n\u00a0\n    \n    const scanl = (f, startValue, xs) => {\n        const lst = [startValue];\n        return (\n            xs.reduce((a, x) => {\n                const v = f(a, x);\n                return (lst.push(v), v);\n            }, startValue),\n            lst\n        );\n    };\n\u00a0\n    \n    const scanr = (f, startValue, xs) => {\n        const lst = [startValue];\n        return (\n            xs.reduceRight((a, x) => {\n                const v = f(a, x);\n                return (lst.push(v), v);\n            }, startValue),\n            lst.reverse()\n        );\n    };\n\u00a0\n    \n    const difference = (a, b) => a - b;\n\u00a0\n    \n    const sum = xs => xs.reduce((a, x) => a + x, 0);\n\u00a0\n    \n    const max = (a, b) => a > b ? a : b;\n\u00a0\n    \n    const min = (a, b) => b < a ? b : a;\n\u00a0\n\u00a0\n    \n    return [\n        [1, 5, 3, 7, 2],\n        [5, 3, 7, 2, 6, 4, 5, 9, 1, 2],\n        [2, 6, 3, 5, 2, 8, 1, 4, 2, 2, 5, 3, 5, 7, 4, 1],\n        [5, 5, 5, 5],\n        [5, 6, 7, 8],\n        [8, 7, 7, 6],\n        [6, 7, 10, 7, 6]\n    ].map(waterCollected);\n\u00a0\n    \n})();[2, 14, 35, 0, 0, 0, 0]"},
{"keywords": "var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n\u00a0\nfunction walkDirectoryTree(folder, folder_name, re_pattern) {\n    WScript.Echo(\"Files in \" + folder_name + \" matching '\" + re_pattern + \"':\");\n    walkDirectoryFilter(folder.files, re_pattern);\n\u00a0\n    var subfolders = folder.SubFolders;\n    WScript.Echo(\"Folders in \" + folder_name + \" matching '\" + re_pattern + \"':\");\n    walkDirectoryFilter(subfolders, re_pattern);\n\u00a0\n    WScript.Echo();\n    var en = new Enumerator(subfolders);\n    while (! en.atEnd()) {\n        var subfolder = en.item();\n        walkDirectoryTree(subfolder, folder_name + \"/\" + subfolder.name, re_pattern);\n        en.moveNext();\n    }\n}\n\u00a0\nfunction walkDirectoryFilter(items, re_pattern) {\n    var e = new Enumerator(items);\n    while (! e.atEnd()) {\n        var item = e.item();\n        if (item.name.match(re_pattern))\n            WScript.Echo(item.name);\n        e.moveNext();\n    }\n}\n\u00a0\nwalkDirectoryTree(dir, dir.name, '.txt$');"},
{"keywords": "var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\nvar dir = fso.GetFolder('test_folder');\n\u00a0\nfunction walkDirectory(dir, re_pattern) {\n    WScript.Echo(\"Files in \" + dir.name + \" matching '\" + re_pattern +\"':\");\n    walkDirectoryFilter(dir.Files, re_pattern);\n\u00a0\n    WScript.Echo(\"Folders in \" + dir.name + \" matching '\" + re_pattern +\"':\");\n    walkDirectoryFilter(dir.Subfolders, re_pattern);\n}\n\u00a0\nfunction walkDirectoryFilter(items, re_pattern) {\n    var e = new Enumerator(items);\n    while (! e.atEnd()) {\n        var item = e.item();\n        if (item.name.match(re_pattern))\n            WScript.Echo(item.name);\n        e.moveNext();\n    }\n}\n\u00a0\nwalkDirectory(dir, '.txt$');"},
{"keywords": "\n\nfunction ordA(a) {\n  return a.charCodeAt(0) - 65;\n}\n\u00a0\n\nfunction vigenere(text, key, decode) {\n  var i = 0, b;\n  key = key.toUpperCase().replace(/[^A-Z]/g, '');\n  return text.toUpperCase().replace(/[^A-Z]/g, '').replace(/[A-Z]/g, function(a) {\n    b = key[i++ % key.length];\n    return String.fromCharCode(((ordA(a) + (decode ? 26 - ordA(b) : ordA(b))) % 26 + 65));\n  });\n}\n\u00a0\n\nvar text = \"The quick brown fox Jumped over the lazy Dog the lazy dog lazy dog dog\";\nvar key = 'alex';\nvar enc = vigenere(text,key);\nvar dec = vigenere(enc,key,true);\n\u00a0\nconsole.log(enc);\nconsole.log(dec);class Vigenere {\n\u00a0\n    key: string\n\u00a0\n    /** Create new cipher based on key */\n    constructor(key: string) {\n        this.key = Vigenere.formatText(key)\n    }\n\u00a0\n    /** Enrypt a given text using key */\n    encrypt(plainText: string): string {\n        return Array.prototype.map.call(Vigenere.formatText(plainText), (letter: string, index: number): string => {\n            return String.fromCharCode((letter.charCodeAt(0) + this.key.charCodeAt(index % this.key.length) - 130) % 26 + 65)\n        }).join('')\n    }\n\u00a0\n    /** Decrypt ciphertext based on key */\n    decrypt(cipherText: string): string {\n        return Array.prototype.map.call(Vigenere.formatText(cipherText), (letter: string, index: number): string => {\n            return String.fromCharCode((letter.charCodeAt(0) - this.key.charCodeAt(index % this.key.length) + 26) % 26 + 65)\n        }).join('')\n    }\n\u00a0\n    /** Converts to uppercase and removes non characters */\n    private static formatText(text: string): string {\n        return text.toUpperCase().replace(/[^A-Z]/g, \"\")\n    }\n\u00a0\n}\n\u00a0\n/** Example usage */\n(() => {\n    let original: string = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.\"\n\u00a0\n    console.log(`Original: ${original}`)\n\u00a0\n    let vig: Vigenere = new Vigenere(\"vigenere\")\n\u00a0\n    let encoded: string = vig.encrypt(original)\n\u00a0\n    console.log(`After encryption: ${encoded}`)\n\u00a0\n    let back: string = vig.decrypt(encoded)\n\u00a0\n    console.log(`After decryption: ${back}`)\n\u00a0\n})()\n\u00a0"},
{"keywords": "function distcheck(random_func, times, opts) {\n    if (opts === undefined) opts = {}\n    opts['delta'] = opts['delta'] || 2;\n\u00a0\n    var count = {}, vals = [];\n    for (var i = 0; i < times; i++) {\n        var val = random_func();\n        if (! has_property(count, val)) {\n            count[val] = 1;\n            vals.push(val);\n        }\n        else\n            count[val] ++;\n    }\n    vals.sort(function(a,b) {return a-b});\n\u00a0\n    var target = times / vals.length;\n    var tolerance = target * opts['delta'] / 100; \n\u00a0\n    for (var i = 0; i < vals.length; i++) {\n        var val = vals[i];\n        if (Math.abs(count[val] - target) > tolerance) \n            throw \"distribution potentially skewed for \" + val +\n                  \": expected result around \" + target + \", got \" +count[val];\n        else\n            print(val + \"\" + count[val]);\n    }\n}\n\u00a0\nfunction has_property(obj, propname) {\n    return typeof(obj[propname]) == \"undefined\" ? false : true;\n}\n\u00a0\ntry {\n    distcheck(function() {return Math.floor(10 * Math.random())}, 100000);\n    print();\n    distcheck(function() {return (Math.random() > 0.95 ? 1 : 0)}, 100000);\n} catch (e) {\n    print(e);\n}"},
{"keywords": "var fs = require('fs');\nvar request = require('request');\n\u00a0\nvar meetup = function() {\n  var key = fs.readFileSync('api_key.txt', 'utf-8');\n  var url = \"https://api.meetup.com\";\n\u00a0\n  var composeURL = function(root, object) {\n    return root + '?' + JSON.stringify(object).replace(/\":\"/g, '=').replace(/\",\"/g, '&').slice(2, -2)\n  }\n\u00a0\n  var get = function(params, callback, path) {\n    params.key = key;\n\u00a0\n    request.get(composeURL(url + (path || '/2/open_events'), params), function(err, res, body) {\n      if ( err ) {\n        console.error(err);\n        return false;\n      }\n\u00a0\n\u00a0\n      callback(JSON.parse(body)['results']);\n    })\n  }\n\u00a0\n\u00a0\n  var post = function(details, callback, path) {\n    details.key = key;\n\u00a0\n    request.post({\n      headers: { 'content-type' : 'application/x-www-form-urlencoded' },\n      url: url + (path || '/2/event'),\n      form: details\n    }, function(err, res, body) {\n      callback(body);\n    })\n  }\n\u00a0\n  var parseEvent = function(mEvent) {\n    /*     * A simple function that converts JSON to      * string in a pretty way    **/\n    var name = mEvent['name'] || '';\n    var desc = mEvent['desc'] || '';\n    var url = mEvent['url'] || '';\n\u00a0\n    if ( mEvent['venue'] ) {\n      var city = mEvent['venue']['city'] || '';\n      var lat = mEvent['venue']['lat'] || '';\n      var lon = mEvent['venue']['lon'] || '';\n    }\n\u00a0\n    if ( mEvent['group'] )\n      var group = mEvent['group']['name'] || '';\n\u00a0\n    var parsed = '';\n\u00a0\n    if ( name ) parsed += 'Name: ' + name + '';\n    if ( desc ) parsed += 'Description: ' + desc + '';\n    if ( url ) parsed += 'Url: ' + url + '';\n    if ( city ) parsed += 'City: ' + city + '';\n    if ( lat ) parsed += 'Latitude: ' + lat + '';\n    if ( lon ) parsed += 'Longitude: ' + lon + '';\n    if ( group ) parsed += 'Group: ' + group + '';\n\u00a0\n    return parsed;\n\u00a0\n  };\n\u00a0\n  var parseEvents = function(results) {\n    console.log('a');\n    for ( var i = 0; i < results.length; i++ ) {\n      console.log( parseEvent(results[i]) );\n    }\n  }\n\u00a0\n  return {\n    get: get,\n    parseEvents: parseEvents,\n    post: post\n  }\n}\n\u00a0\n\u00a0\n\u00a0\nmeetup().get({\n  \n  topic: 'photo',\n  city: 'nyc'\n}, function(results) {\n  meetup().parseEvents(results);\n});\n\u00a0\n\u00a0\n/* * Getting group ID and group urlname * * The URL name is simply the part after meetup.com/ on a meetup group. * Example, ID of meetup.com/foodie-programmers is 'foodie-programmers'. * * Running the code below with the group name will give the group ID, an integer.\u00a0meetup().get({  'group_urlname': 'foodie-programmers'}, function(group) {  console.log(group.id);}, '/2/groups');\u00a0 * Using the above group_id and the group_urlname manually,  * you can post events to a group with the below code**/\n\u00a0\nmeetup().post({\n  \n  name: 'Finding Nemo',\n  address_1: 'p sherman 42 wallaby way sydney',\n  city: 'sydney',\n  country: 'australia',\n  \n}, function(venue) {\n  console.log('Venue: ', venue, venue.id); \n  \n}, '/' + '{{ foodie-programmers }}' + '/venues'); \n\n\u00a0\n\u00a0\nmeetup().post({\n  \n  group_id: 42, \n  group_urlname: 'foodie-programmers',\n  name: 'Tomato Python Fest',\n  description: 'Code vegetables in Python! Special speech by Guido Van Ossum',\n  duration: 1000 * 60 * 60 * 2, \n  time: 1419879086343, \n  why: 'We should do this because... Less than 250 characters',\n  hosts: 'up to 5 comma separated member ids',\n  venue_id: 42, \n  lat: 42, \n  lon: 42, \n  simple_html_description: 'Event description in <b>simple html</b>. Less than <i>50000</i> characters.'\n}, function(result) {\n  console.log('Event: ', result);\n})"},
{"keywords": "function dotProduct() {\n  var len = arguments[0] && arguments[0].length;\n  var argsLen = arguments.length;\n  var i, j = len;\n  var prod, sum = 0;\n\u00a0\n  \n  if (!len) {\n    return;\n  }\n\u00a0\n  \n  i = argsLen;\n  while (i--) {\n\u00a0\n    if (arguments[i].length != len) {\n      return;  \n    }\n  }\n\u00a0\n  \n  while (j--) {\n    i = argsLen;\n    prod = 1;\n\u00a0\n    while (i--) {\n      prod *= arguments[i][j];\n    }\n    sum += prod;\n  }\n  return sum;\n}\n\u00a0\nfunction crossProduct(a, b) {\n\u00a0\n  \n  if (a.length != 3 || b.length != 3) {\n     return;\n  }\n\u00a0\n  return [a[1]*b[2] - a[2]*b[1],\n          a[2]*b[0] - a[0]*b[2],\n          a[0]*b[1] - a[1]*b[0]];\n\u00a0\n}\n\u00a0\nfunction scalarTripleProduct(a, b, c) {\n  return dotProduct(a, crossProduct(b, c));\n}\n\u00a0\nfunction vectorTripleProduct(a, b, c) {\n  return crossProduct(a, crossProduct(b, c));\n}\n\u00a0\n\n(function () {\n  var a = [3, 4, 5];\n  var b = [4, 3, 5];\n  var c = [-5, -12, -13];\n\u00a0\n  alert(\n    'A . B: ' + dotProduct(a, b) +\n    '' +\n    'A x B: ' + crossProduct(a, b) +\n    '' +\n    'A . (B x C): ' + scalarTripleProduct(a, b, c) +\n    '' +\n    'A x (B x C): ' + vectorTripleProduct(a, b, c)\n  ); \n}());"},
{"keywords": "function printAll() {\n  for (var i=0; i<arguments.length; i++)\n    print(arguments[i])\n}\nprintAll(4, 3, 5, 6, 4, 3);\nprintAll(4, 3, 5);\nprintAll(\"Rosetta\", \"Code\", \"Is\", \"Awesome!\");args = [\"Rosetta\", \"Code\", \"Is\", \"Awesome!\"]\nprintAll.apply(null, args)let\n  fix = \n    f => (f => f(f))(g => f((...a) => g(g)(...a))),\n  forAll =\n    f => \n      fix(\n        z => (a,...b) => (\n          (a === void 0)\n          ||(f(a), z(...b)))),\n  printAll = forAll(print);\n\u00a0\nprintAll(0,1,2,3,4,5);\nprintAll(6,7,8);\n(f => a => f(...a))(printAll)([9,10,11,12,13,14]);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00a0(() => {\n    'use strict';\n\u00a0\n    \n    const show = x => JSON.stringify(x, null, 2);\n\u00a0\n    \n    const printAll = (...a) => a.map(show)\n        .join('');\n\u00a0\n    return printAll(1, 2, 3, 2 + 2, \"five\", 6);\n})();\u00a0\nfunction printAll(separator,argv..) {\n  if(argv.length)\n    stdout.print(argv[0]);\n  for (var i=1; i < argv.length; i++)\n    stdout.print(separator, argv[i]);\n}\nprintAll(\" \", 4, 3, 5, 6, 4, 3);\nprintAll(\",\", 4, 3, 5);\nprintAll(\"! \",\"Rosetta\", \"Code\", \"Is\", \"Awesome\");"},
{"keywords": "\nvar a=1;\n\u00a0\n\nfunction one(){\n    alert(a); \n}\n\u00a0\n\nfunction two(a){\n    alert(a);\n}\n\u00a0\n\nfunction three(){\n  var a = 3;\n  alert(a);\n}\n\u00a0\n\nfunction four(){\n    if(true){\n        var a=4;\n    }\n\u00a0\n    alert(a); \n}\n\u00a0\n\u00a0\n\nfunction Five(){\n    this.a = 5;\n}\n\u00a0\n\u00a0\n\nvar six = function(){\n    var foo = 6;\n\u00a0\n    return function(){\n        \n        \n        alert(foo);\n    }\n}()\n\u00a0\n\u00a0\n\nfunction Seven(){\n  this.a = 7;\n}\n\u00a0\n\nSeven.prototype.a = -1; \nSeven.prototype.b = 8; \n\u00a0\n\u00a0\n\u00a0\n\none();\ntwo(2);\nthree();\nfour();\nalert(new Five().a);\nsix();\nalert(new Seven().a);\nalert(new Seven().b);"},
{"keywords": "WScript.Echo(\"Enter a string\");\nvar str = WScript.StdIn.ReadLine();\n\u00a0\nvar val = 0;\nwhile (val != 75000) {\n    WScript.Echo(\"Enter the integer 75000\");\n    val = parseInt( WScript.StdIn.ReadLine() );\n}print(\"Enter a string\");\nvar str = readline();\n\u00a0\nvar val = 0;\nwhile (val != 75000) {\n    print(\"Enter the integer 75000\");\n    val = parseInt( readline() );\n}"},
{"keywords": "var str = prompt(\"Enter a string\");\nvar value = 0;\nwhile (value != 75000) {\n    value = parseInt( prompt(\"Enter the number 75000\") );\n}"},
{"keywords": "(function (lstURL) {\n\u00a0\n    var e = document.createElement('a'),\n        lstKeys = [\n            'hash',\n            'host',\n            'hostname',\n            'origin',\n            'pathname',\n            'port',\n            'protocol',\n            'search'\n        ],\n\u00a0\n        fnURLParse = function (strURL) {\n            e.href = strURL;\n\u00a0\n            return lstKeys.reduce(\n                function (dct, k) {\n                    dct[k] = e[k];\n                    return dct;\n                }, {}\n            );\n        };\n\u00a0\n    return JSON.stringify(\n        lstURL.map(fnURLParse),\n        null, 2\n    );\n\u00a0\n})([\n  \"foo://example.com:8042/over/there?name=ferret#nose\",\n  \"urn:example:animal:ferret:nose\",\n  \"jdbc:mysql://test_user::3306/sakila?profileSQL=true\",\n  \"ftp://ftp.is.co.za/rfc/rfc1808.txt\",\n  \"http://www.ietf.org/rfc/rfc2396.txt#header1\",\n  \"ldap://[2001:db8::7]/c=GB?objectClass=one&objectClass=two\",\n  \"mailto:\",\n  \"news:comp.infosystems.www.servers.unix\",\n  \"tel:+1-816-555-1212\",\n  \"telnet://192.0.2.16:80/\",\n  \"urn:oasis:names:specification:docbook:dtd:xml:4.1.2\",\n  \"ssh:\",\n  \"https://bob:/place\",\n  \"http://example.com/?a=1&b=2+2&c=3&c=4&d=%65%6e%63%6F%64%65%64\"\n]);"},
{"keywords": "var normal = 'http://foo/bar/';\nvar encoded = encodeURIComponent(normal);"},
{"keywords": "decodeURIComponent(\"http%3A%2F%2Ffoo%20bar%2F\")"},
{"keywords": "const fs = require('fs');\nfs.readdir('.', (err, names) => names.sort().map( name => console.log(name) ));"},
{"keywords": "var a;\n\u00a0\ntypeof(a) === \"undefined\";\ntypeof(b) === \"undefined\";\n\u00a0\nvar obj = {}; \ntypeof(obj.c) === \"undefined\";\n\u00a0\nobj.c = 42;\n\u00a0\nobj.c === 42;\ndelete obj.c;\ntypeof(obj.c) === \"undefined\";var a;\na === void 0; \nb === void 0; "},
{"keywords": "var \u1fa9 = \"something\";\nvar \u0126\u0114\u013d\u013b\u014e = \"hello\";\nvar \u3031\u3031\u3031\u3031 = \"too less\";\nvar \u091c\u093e\u0935\u093e\u0938\u094d\u0915\u094d\u0930\u093f\u092a\u094d\u091f = \"javascript\"; \nvar KingGeorge\u2166 = \"Roman numerals.\";\n\u00a0\nconsole.log([\u1fa9, \u0126\u0114\u013d\u013b\u014e, \u3031\u3031\u3031\u3031, \u091c\u093e\u0935\u093e\u0938\u094d\u0915\u094d\u0930\u093f\u092a\u094d\u091f, KingGeorge\u2166])"},
{"keywords": "(function () {\n    var concatMap = function (f, xs) {\n        return [].concat.apply([], xs.map(f))\n    };\n\u00a0\n    return function (n, xs) {\n        return concatMap(function (x, ix) {\n            return concatMap(function (y, iy) {\n                return iy <= ix ? [] : x + y === n ? [\n                    [ix, iy]\n                ] : []\n            }, xs)\n        }, xs)\n    }(21, [0, 2, 11, 19, 90]);\n})();\n\u00a0[[1,3]](() => {\n    'use strict';\n\u00a0\n    let summingPairIndices = (n, xs) => nubBy(\n            ([x, y], [x1, y1]) => x === x1 && y === y1,\n            concatMap(\n                ([x, y]) =>\n                    x === y ? [] : (x + y === n ? [[x, y]] : []),\n                cartesianProduct(xs, xs)\n            ).map(xs => xs.sort())\n        ).map(([x, y]) => [xs.indexOf(y), xs.indexOf(x)]);\n\u00a0\n\u00a0\n    \n\u00a0\n    \n    let concatMap = (f, xs) => [].concat.apply([], xs.map(f)),\n\u00a0\n        \n        cartesianProduct = (xs, ys) =>\n            concatMap(x => concatMap(y => [[x, y]], ys), xs),\n\u00a0\n        \n        nubBy = (p, xs) => {\n            let x = xs.length ? xs[0] : undefined;\n\u00a0\n            return x !== undefined ? [x].concat(\n                nubBy(p, xs.slice(1).filter(y => !p(x, y)))\n            ) : [];\n        };\n\u00a0\n\u00a0\n    return summingPairIndices(21, [0, 2, 11, 19, 90]);\n})();\n\u00a0[1,3](() => {\n    'use strict';\n\u00a0\n    \n    let concatMap = (f, xs) => [].concat.apply([], xs.map(f));\n\u00a0\n    \n    let summingPairIndices = (n, xs) =>\n\u00a0\n            \n            \n            concatMap((x, ix) => concatMap((y, iy) =>\n                iy <= ix ? [] : (\n                                 \n                                 \n                    x + y === n ? [\n                        [ix, iy]\n                    ] : []\n                ), xs), xs);\n\u00a0\n    return summingPairIndices(21, [0, 2, 11, 19, 90]);\n})();\n\u00a0[[1,3]]"}